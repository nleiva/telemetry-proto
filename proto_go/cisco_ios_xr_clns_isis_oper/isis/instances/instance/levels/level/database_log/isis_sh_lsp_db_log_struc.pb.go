// Code generated by protoc-gen-go. DO NOT EDIT.
// source: isis_sh_lsp_db_log_struc.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_database_log

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// LSP Database Log
type IsisShLspDbLogStruc_KEYS struct {
	InstanceName         string   `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	Level                string   `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsisShLspDbLogStruc_KEYS) Reset()         { *m = IsisShLspDbLogStruc_KEYS{} }
func (m *IsisShLspDbLogStruc_KEYS) String() string { return proto.CompactTextString(m) }
func (*IsisShLspDbLogStruc_KEYS) ProtoMessage()    {}
func (*IsisShLspDbLogStruc_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_isis_sh_lsp_db_log_struc_b75c4c8dda08633a, []int{0}
}
func (m *IsisShLspDbLogStruc_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsisShLspDbLogStruc_KEYS.Unmarshal(m, b)
}
func (m *IsisShLspDbLogStruc_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsisShLspDbLogStruc_KEYS.Marshal(b, m, deterministic)
}
func (dst *IsisShLspDbLogStruc_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsisShLspDbLogStruc_KEYS.Merge(dst, src)
}
func (m *IsisShLspDbLogStruc_KEYS) XXX_Size() int {
	return xxx_messageInfo_IsisShLspDbLogStruc_KEYS.Size(m)
}
func (m *IsisShLspDbLogStruc_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_IsisShLspDbLogStruc_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_IsisShLspDbLogStruc_KEYS proto.InternalMessageInfo

func (m *IsisShLspDbLogStruc_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *IsisShLspDbLogStruc_KEYS) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

type IsisShLspDbLogStruc struct {
	// Entries
	LogEntry             []*IsisShLspDbLogEnt `protobuf:"bytes,50,rep,name=log_entry,json=logEntry,proto3" json:"log_entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *IsisShLspDbLogStruc) Reset()         { *m = IsisShLspDbLogStruc{} }
func (m *IsisShLspDbLogStruc) String() string { return proto.CompactTextString(m) }
func (*IsisShLspDbLogStruc) ProtoMessage()    {}
func (*IsisShLspDbLogStruc) Descriptor() ([]byte, []int) {
	return fileDescriptor_isis_sh_lsp_db_log_struc_b75c4c8dda08633a, []int{1}
}
func (m *IsisShLspDbLogStruc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsisShLspDbLogStruc.Unmarshal(m, b)
}
func (m *IsisShLspDbLogStruc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsisShLspDbLogStruc.Marshal(b, m, deterministic)
}
func (dst *IsisShLspDbLogStruc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsisShLspDbLogStruc.Merge(dst, src)
}
func (m *IsisShLspDbLogStruc) XXX_Size() int {
	return xxx_messageInfo_IsisShLspDbLogStruc.Size(m)
}
func (m *IsisShLspDbLogStruc) XXX_DiscardUnknown() {
	xxx_messageInfo_IsisShLspDbLogStruc.DiscardUnknown(m)
}

var xxx_messageInfo_IsisShLspDbLogStruc proto.InternalMessageInfo

func (m *IsisShLspDbLogStruc) GetLogEntry() []*IsisShLspDbLogEnt {
	if m != nil {
		return m.LogEntry
	}
	return nil
}

// Timestamp for an event
type IsisShTimestampType struct {
	// Timestamp value (seconds)
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Timestamp value (nanoseconds)
	NanoSeconds          uint32   `protobuf:"varint,2,opt,name=nano_seconds,json=nanoSeconds,proto3" json:"nano_seconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsisShTimestampType) Reset()         { *m = IsisShTimestampType{} }
func (m *IsisShTimestampType) String() string { return proto.CompactTextString(m) }
func (*IsisShTimestampType) ProtoMessage()    {}
func (*IsisShTimestampType) Descriptor() ([]byte, []int) {
	return fileDescriptor_isis_sh_lsp_db_log_struc_b75c4c8dda08633a, []int{2}
}
func (m *IsisShTimestampType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsisShTimestampType.Unmarshal(m, b)
}
func (m *IsisShTimestampType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsisShTimestampType.Marshal(b, m, deterministic)
}
func (dst *IsisShTimestampType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsisShTimestampType.Merge(dst, src)
}
func (m *IsisShTimestampType) XXX_Size() int {
	return xxx_messageInfo_IsisShTimestampType.Size(m)
}
func (m *IsisShTimestampType) XXX_DiscardUnknown() {
	xxx_messageInfo_IsisShTimestampType.DiscardUnknown(m)
}

var xxx_messageInfo_IsisShTimestampType proto.InternalMessageInfo

func (m *IsisShTimestampType) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *IsisShTimestampType) GetNanoSeconds() uint32 {
	if m != nil {
		return m.NanoSeconds
	}
	return 0
}

// Generic portion of a log entry
type IsisShGenericLogEnt struct {
	// Time in UTC relative to Jan 1st, 1970
	Timestamp            *IsisShTimestampType `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *IsisShGenericLogEnt) Reset()         { *m = IsisShGenericLogEnt{} }
func (m *IsisShGenericLogEnt) String() string { return proto.CompactTextString(m) }
func (*IsisShGenericLogEnt) ProtoMessage()    {}
func (*IsisShGenericLogEnt) Descriptor() ([]byte, []int) {
	return fileDescriptor_isis_sh_lsp_db_log_struc_b75c4c8dda08633a, []int{3}
}
func (m *IsisShGenericLogEnt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsisShGenericLogEnt.Unmarshal(m, b)
}
func (m *IsisShGenericLogEnt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsisShGenericLogEnt.Marshal(b, m, deterministic)
}
func (dst *IsisShGenericLogEnt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsisShGenericLogEnt.Merge(dst, src)
}
func (m *IsisShGenericLogEnt) XXX_Size() int {
	return xxx_messageInfo_IsisShGenericLogEnt.Size(m)
}
func (m *IsisShGenericLogEnt) XXX_DiscardUnknown() {
	xxx_messageInfo_IsisShGenericLogEnt.DiscardUnknown(m)
}

var xxx_messageInfo_IsisShGenericLogEnt proto.InternalMessageInfo

func (m *IsisShGenericLogEnt) GetTimestamp() *IsisShTimestampType {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// Contents of an IS-IS LSP header
type IsisShLspHeader struct {
	// The LSP ID
	LspId string `protobuf:"bytes,1,opt,name=lsp_id,json=lspId,proto3" json:"lsp_id,omitempty"`
	// TRUE if this is a locally generated LSP
	LocalLspFlag bool `protobuf:"varint,2,opt,name=local_lsp_flag,json=localLspFlag,proto3" json:"local_lsp_flag,omitempty"`
	// TRUE if this LSP has not expired
	LspActiveFlag bool `protobuf:"varint,3,opt,name=lsp_active_flag,json=lspActiveFlag,proto3" json:"lsp_active_flag,omitempty"`
	// Time, in seconds, until LSP expiry (if active) or deletion (if expired)
	LspHoldtime uint32 `protobuf:"varint,4,opt,name=lsp_holdtime,json=lspHoldtime,proto3" json:"lsp_holdtime,omitempty"`
	// The LSP sequence number
	LspSequenceNumber uint32 `protobuf:"varint,5,opt,name=lsp_sequence_number,json=lspSequenceNumber,proto3" json:"lsp_sequence_number,omitempty"`
	// The LSP checksum
	LspChecksum uint32 `protobuf:"varint,6,opt,name=lsp_checksum,json=lspChecksum,proto3" json:"lsp_checksum,omitempty"`
	// TRUE if partition repair is supported
	LspParitionRepairSupportedFlag bool `protobuf:"varint,7,opt,name=lsp_parition_repair_supported_flag,json=lspParitionRepairSupportedFlag,proto3" json:"lsp_parition_repair_supported_flag,omitempty"`
	// TRUE if attached bit is set
	LspAttachedFlag bool `protobuf:"varint,8,opt,name=lsp_attached_flag,json=lspAttachedFlag,proto3" json:"lsp_attached_flag,omitempty"`
	// TRUE if the overload bit is set
	LspOverloadedFlag bool `protobuf:"varint,9,opt,name=lsp_overloaded_flag,json=lspOverloadedFlag,proto3" json:"lsp_overloaded_flag,omitempty"`
	// TRUE if the LSP is non-v1a, XXX for testing
	LspNonV1AFlag uint32 `protobuf:"varint,10,opt,name=lsp_non_v1_a_flag,json=lspNonV1AFlag,proto3" json:"lsp_non_v1_a_flag,omitempty"`
	// The type of the IS sourcing the LSP
	LspLevel string `protobuf:"bytes,11,opt,name=lsp_level,json=lspLevel,proto3" json:"lsp_level,omitempty"`
	// The total length of the LSP
	LspLength            uint32   `protobuf:"varint,12,opt,name=lsp_length,json=lspLength,proto3" json:"lsp_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsisShLspHeader) Reset()         { *m = IsisShLspHeader{} }
func (m *IsisShLspHeader) String() string { return proto.CompactTextString(m) }
func (*IsisShLspHeader) ProtoMessage()    {}
func (*IsisShLspHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_isis_sh_lsp_db_log_struc_b75c4c8dda08633a, []int{4}
}
func (m *IsisShLspHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsisShLspHeader.Unmarshal(m, b)
}
func (m *IsisShLspHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsisShLspHeader.Marshal(b, m, deterministic)
}
func (dst *IsisShLspHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsisShLspHeader.Merge(dst, src)
}
func (m *IsisShLspHeader) XXX_Size() int {
	return xxx_messageInfo_IsisShLspHeader.Size(m)
}
func (m *IsisShLspHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_IsisShLspHeader.DiscardUnknown(m)
}

var xxx_messageInfo_IsisShLspHeader proto.InternalMessageInfo

func (m *IsisShLspHeader) GetLspId() string {
	if m != nil {
		return m.LspId
	}
	return ""
}

func (m *IsisShLspHeader) GetLocalLspFlag() bool {
	if m != nil {
		return m.LocalLspFlag
	}
	return false
}

func (m *IsisShLspHeader) GetLspActiveFlag() bool {
	if m != nil {
		return m.LspActiveFlag
	}
	return false
}

func (m *IsisShLspHeader) GetLspHoldtime() uint32 {
	if m != nil {
		return m.LspHoldtime
	}
	return 0
}

func (m *IsisShLspHeader) GetLspSequenceNumber() uint32 {
	if m != nil {
		return m.LspSequenceNumber
	}
	return 0
}

func (m *IsisShLspHeader) GetLspChecksum() uint32 {
	if m != nil {
		return m.LspChecksum
	}
	return 0
}

func (m *IsisShLspHeader) GetLspParitionRepairSupportedFlag() bool {
	if m != nil {
		return m.LspParitionRepairSupportedFlag
	}
	return false
}

func (m *IsisShLspHeader) GetLspAttachedFlag() bool {
	if m != nil {
		return m.LspAttachedFlag
	}
	return false
}

func (m *IsisShLspHeader) GetLspOverloadedFlag() bool {
	if m != nil {
		return m.LspOverloadedFlag
	}
	return false
}

func (m *IsisShLspHeader) GetLspNonV1AFlag() uint32 {
	if m != nil {
		return m.LspNonV1AFlag
	}
	return 0
}

func (m *IsisShLspHeader) GetLspLevel() string {
	if m != nil {
		return m.LspLevel
	}
	return ""
}

func (m *IsisShLspHeader) GetLspLength() uint32 {
	if m != nil {
		return m.LspLength
	}
	return 0
}

// LSP Database Log Entry
type IsisShLspDbLogEnt struct {
	// Generic entry data
	GenericData *IsisShGenericLogEnt `protobuf:"bytes,1,opt,name=generic_data,json=genericData,proto3" json:"generic_data,omitempty"`
	// Operation applying to this entry.
	LspdbOperation string `protobuf:"bytes,2,opt,name=lspdb_operation,json=lspdbOperation,proto3" json:"lspdb_operation,omitempty"`
	// Entry being inserted or the updated version of an old entry.
	NewLspEntry *IsisShLspHeader `protobuf:"bytes,3,opt,name=new_lsp_entry,json=newLspEntry,proto3" json:"new_lsp_entry,omitempty"`
	// Entry being replaced.
	OldLspEntry          *IsisShLspHeader `protobuf:"bytes,4,opt,name=old_lsp_entry,json=oldLspEntry,proto3" json:"old_lsp_entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *IsisShLspDbLogEnt) Reset()         { *m = IsisShLspDbLogEnt{} }
func (m *IsisShLspDbLogEnt) String() string { return proto.CompactTextString(m) }
func (*IsisShLspDbLogEnt) ProtoMessage()    {}
func (*IsisShLspDbLogEnt) Descriptor() ([]byte, []int) {
	return fileDescriptor_isis_sh_lsp_db_log_struc_b75c4c8dda08633a, []int{5}
}
func (m *IsisShLspDbLogEnt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsisShLspDbLogEnt.Unmarshal(m, b)
}
func (m *IsisShLspDbLogEnt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsisShLspDbLogEnt.Marshal(b, m, deterministic)
}
func (dst *IsisShLspDbLogEnt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsisShLspDbLogEnt.Merge(dst, src)
}
func (m *IsisShLspDbLogEnt) XXX_Size() int {
	return xxx_messageInfo_IsisShLspDbLogEnt.Size(m)
}
func (m *IsisShLspDbLogEnt) XXX_DiscardUnknown() {
	xxx_messageInfo_IsisShLspDbLogEnt.DiscardUnknown(m)
}

var xxx_messageInfo_IsisShLspDbLogEnt proto.InternalMessageInfo

func (m *IsisShLspDbLogEnt) GetGenericData() *IsisShGenericLogEnt {
	if m != nil {
		return m.GenericData
	}
	return nil
}

func (m *IsisShLspDbLogEnt) GetLspdbOperation() string {
	if m != nil {
		return m.LspdbOperation
	}
	return ""
}

func (m *IsisShLspDbLogEnt) GetNewLspEntry() *IsisShLspHeader {
	if m != nil {
		return m.NewLspEntry
	}
	return nil
}

func (m *IsisShLspDbLogEnt) GetOldLspEntry() *IsisShLspHeader {
	if m != nil {
		return m.OldLspEntry
	}
	return nil
}

func init() {
	proto.RegisterType((*IsisShLspDbLogStruc_KEYS)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.database_log.isis_sh_lsp_db_log_struc_KEYS")
	proto.RegisterType((*IsisShLspDbLogStruc)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.database_log.isis_sh_lsp_db_log_struc")
	proto.RegisterType((*IsisShTimestampType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.database_log.isis_sh_timestamp_type")
	proto.RegisterType((*IsisShGenericLogEnt)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.database_log.isis_sh_generic_log_ent")
	proto.RegisterType((*IsisShLspHeader)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.database_log.isis_sh_lsp_header")
	proto.RegisterType((*IsisShLspDbLogEnt)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.database_log.isis_sh_lsp_db_log_ent")
}

func init() {
	proto.RegisterFile("isis_sh_lsp_db_log_struc.proto", fileDescriptor_isis_sh_lsp_db_log_struc_b75c4c8dda08633a)
}

var fileDescriptor_isis_sh_lsp_db_log_struc_b75c4c8dda08633a = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xdb, 0x6e, 0x13, 0x3d,
	0x10, 0xd6, 0x36, 0x3d, 0x24, 0x4e, 0xd2, 0x5f, 0xf5, 0xcf, 0x61, 0x25, 0xd4, 0xaa, 0x0d, 0x08,
	0x2a, 0x2e, 0x56, 0x6a, 0x79, 0x82, 0x0a, 0x8a, 0x38, 0x94, 0x16, 0x6d, 0x04, 0x12, 0xdc, 0x58,
	0xce, 0xee, 0x34, 0x59, 0xe1, 0xd8, 0xc6, 0xe3, 0xa4, 0xf4, 0x16, 0xc4, 0x05, 0x4f, 0xc1, 0x93,
	0xf1, 0x28, 0x48, 0xc8, 0xb3, 0xeb, 0x1e, 0x10, 0xbd, 0xa3, 0x5c, 0x65, 0xe7, 0x9b, 0xcf, 0xdf,
	0xcc, 0x67, 0x8f, 0x1d, 0xb6, 0x51, 0x61, 0x85, 0x02, 0x27, 0x42, 0xa1, 0x15, 0xe5, 0x48, 0x28,
	0x33, 0x16, 0xe8, 0xdd, 0xac, 0xc8, 0xac, 0x33, 0xde, 0xf0, 0x57, 0x45, 0x85, 0x85, 0x11, 0x95,
	0x41, 0xf1, 0xc9, 0x89, 0x42, 0x69, 0x14, 0xb4, 0xc2, 0x58, 0x70, 0x59, 0xf8, 0xca, 0x2a, 0x8d,
	0x5e, 0xea, 0x02, 0xce, 0xbf, 0x32, 0x05, 0x73, 0x50, 0x58, 0xff, 0x64, 0xa5, 0xf4, 0x72, 0x24,
	0x11, 0x82, 0xf4, 0xe0, 0x3d, 0x5b, 0xbf, 0xaa, 0xa0, 0x78, 0xb9, 0xff, 0x6e, 0xc8, 0xef, 0xb2,
	0x7e, 0x94, 0x11, 0x5a, 0x4e, 0x21, 0x4d, 0x36, 0x93, 0xed, 0x4e, 0xde, 0x8b, 0xe0, 0xa1, 0x9c,
	0x02, 0xbf, 0xc1, 0x96, 0x48, 0x3b, 0x5d, 0xa0, 0x64, 0x1d, 0x0c, 0xbe, 0x27, 0x2c, 0xbd, 0x4a,
	0x9c, 0x7f, 0x4e, 0x58, 0x27, 0x44, 0xa0, 0xbd, 0x3b, 0x4d, 0x77, 0x37, 0x5b, 0xdb, 0xdd, 0x5d,
	0xc8, 0xfe, 0xaa, 0xb9, 0xec, 0x0f, 0xc5, 0x41, 0xfb, 0xbc, 0xad, 0xcc, 0x78, 0x3f, 0x94, 0x1d,
	0xbc, 0x61, 0xb7, 0x22, 0xc7, 0x57, 0x53, 0x40, 0x2f, 0xa7, 0x56, 0xf8, 0x53, 0x0b, 0x3c, 0x65,
	0x2b, 0x08, 0x85, 0xd1, 0x25, 0x92, 0xe1, 0x7e, 0x1e, 0x43, 0xbe, 0xc5, 0x7a, 0x5a, 0x6a, 0x23,
	0x62, 0x7a, 0x81, 0xd2, 0xdd, 0x80, 0x0d, 0x6b, 0x28, 0x18, 0xbf, 0x1d, 0x75, 0xc7, 0xa0, 0xc1,
	0x55, 0x45, 0x2c, 0xce, 0xbf, 0x24, 0xac, 0x73, 0x56, 0x8b, 0xb4, 0xaf, 0xcf, 0xf7, 0x65, 0x4f,
	0xf9, 0x79, 0xdd, 0xc1, 0xcf, 0x16, 0xe3, 0x17, 0x77, 0x67, 0x02, 0xb2, 0x04, 0xc7, 0x6f, 0xb2,
	0xe5, 0x10, 0x55, 0x65, 0x73, 0xca, 0x4b, 0x0a, 0xed, 0xf3, 0x92, 0xdf, 0x63, 0xab, 0xca, 0x14,
	0x52, 0x11, 0xf5, 0x58, 0xc9, 0x31, 0x99, 0x6e, 0xe7, 0x3d, 0x42, 0x0f, 0xd0, 0x3e, 0x55, 0x72,
	0xcc, 0xef, 0xb3, 0xff, 0x42, 0x5e, 0x16, 0xbe, 0x9a, 0x43, 0x4d, 0x6b, 0x11, 0xad, 0xaf, 0xd0,
	0xee, 0x11, 0x4a, 0xbc, 0x2d, 0xd6, 0xa3, 0x92, 0x46, 0x95, 0xa1, 0xa1, 0x74, 0xb1, 0xde, 0x40,
	0x85, 0xf6, 0x59, 0x03, 0xf1, 0x8c, 0xfd, 0x1f, 0x28, 0x08, 0x1f, 0x67, 0x40, 0x83, 0x37, 0x9b,
	0x8e, 0xc0, 0xa5, 0x4b, 0xc4, 0x5c, 0x53, 0x68, 0x87, 0x4d, 0xe6, 0x90, 0x12, 0x51, 0xb2, 0x98,
	0x40, 0xf1, 0x01, 0x67, 0xd3, 0x74, 0xf9, 0x4c, 0xf2, 0x71, 0x03, 0xf1, 0x17, 0x6c, 0x10, 0x28,
	0x56, 0xba, 0xca, 0x57, 0x46, 0x0b, 0x07, 0x56, 0x56, 0x4e, 0xe0, 0xcc, 0x5a, 0xe3, 0x3c, 0x94,
	0x75, 0xc3, 0x2b, 0xd4, 0xf0, 0x86, 0x42, 0xfb, 0xba, 0x21, 0xe6, 0xc4, 0x1b, 0x46, 0x1a, 0x39,
	0x78, 0xc8, 0xd6, 0xc8, 0xa9, 0xf7, 0xb2, 0x98, 0xc4, 0xa5, 0x6d, 0x5a, 0x1a, 0xb6, 0x60, 0xaf,
	0xc1, 0x89, 0xdb, 0x58, 0x31, 0x73, 0x70, 0xca, 0xc8, 0x32, 0xb2, 0x3b, 0xc4, 0x0e, 0x32, 0x47,
	0x67, 0x19, 0xe2, 0x6f, 0xd7, 0xda, 0xda, 0x68, 0x31, 0xdf, 0x11, 0xb2, 0x66, 0x33, 0xf2, 0x13,
	0xf6, 0xf1, 0xd0, 0xe8, 0xb7, 0x3b, 0x7b, 0xc4, 0xbc, 0xc3, 0x3a, 0x81, 0x59, 0x5f, 0xbc, 0x2e,
	0x9d, 0x57, 0x5b, 0xa1, 0x3d, 0x08, 0x31, 0x5f, 0x67, 0xac, 0x4e, 0xea, 0xb1, 0x9f, 0xa4, 0x3d,
	0x5a, 0xdf, 0xa1, 0x6c, 0x00, 0x06, 0x3f, 0x5a, 0xe7, 0x93, 0x7f, 0xf9, 0x76, 0xf0, 0x6f, 0x09,
	0xeb, 0xc5, 0xa1, 0x0d, 0x53, 0xd5, 0xcc, 0xe8, 0xf1, 0x35, 0xcd, 0xe8, 0x6f, 0xf7, 0x23, 0xef,
	0x36, 0xc0, 0x13, 0xe9, 0x25, 0x7f, 0x40, 0x23, 0x55, 0x8e, 0xa8, 0x88, 0x0c, 0xc7, 0xd1, 0xbc,
	0x30, 0xab, 0x04, 0x1f, 0x45, 0x94, 0x7f, 0x4d, 0x58, 0x5f, 0xc3, 0x09, 0x79, 0xa9, 0x5f, 0x94,
	0x16, 0x75, 0x2d, 0xaf, 0xf1, 0x45, 0xa9, 0xef, 0x4c, 0xde, 0xd5, 0x70, 0x72, 0x80, 0x96, 0x1e,
	0x14, 0xea, 0xc3, 0xa8, 0xf2, 0x42, 0x1f, 0x8b, 0xff, 0xac, 0x0f, 0xa3, 0xca, 0xd8, 0xc7, 0x68,
	0x99, 0xfe, 0x2c, 0x1e, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x09, 0xe9, 0x55, 0x33, 0x4e, 0x06,
	0x00, 0x00,
}
